syntax = "proto3";

option go_package = "./internal/api/v1";

package gravacao;

service Gravacao {
    rpc Registrar (RegistrarReq) returns (RegistrarRes) {}
    rpc RemoverRegistro (RemoverRegistroReq) returns (RemoverRegistroRes) {}

    rpc AtualizarListaVeiculos (AtualizarListaVeiculosReq) returns (AtualizarListaVeiculosResp) {}

    // rpc statusArmazenamento (StatusArmazenamentoParams) returns (StatusArmazenamento) {}
    // rpc configurarHousekeeping (HousekeepingConfig) returns (StatusHousekeeping) {}

    rpc CreateProcessoG (CreateProcessoGReq) returns (CreateProcessoGRes) {}
    rpc ReadProcessoG (ReadProcessoGReq) returns (ReadProcessoGRes) {}
    rpc ReadProcessoGs (ReadProcessoGsReq) returns (ReadProcessoGsRes) {}
    rpc UpdateProcessoG (UpdateProcessoGReq) returns (UpdateProcessoGRes) {}
    rpc DeleteProcessoG (DeleteProcessoGReq) returns (DeleteProcessoGRes) {}
}

message RegistrarReq {
    string endereco_ip = 1;
    int32 porta = 2;
    string db_host = 3;
    string db_user = 4;
    string db_password = 5;
    string db_name = 6;
    int32 db_maxidleconns = 7;
    int32 db_maxopenconns = 8;
    string db_sslmode = 9;
}

message RegistrarRes {}

// ===================

message RemoverRegistroReq {}

message RemoverRegistroRes {}

// ===================

message ProcessoG {
    string ProcessoG_id = 1;
    string servidor_gravacao_id = 2;
    string camera_id = 3;
    int32 processador = 4;
    int32 adaptador = 5;
    bool execucao = 6;
}

message CreateProcessoGReq {
    ProcessoG ProcessoG = 1;
}

message CreateProcessoGRes {
    string ProcessoG_id = 1;
}

message ReadProcessoGReq {
    string ProcessoG_id =1;
}

message ReadProcessoGRes {
    ProcessoG ProcessoG = 1;
}

message ReadProcessoGsReq {}

message ReadProcessoGsRes {
    repeated ProcessoG ProcessoGs = 1;
}

message UpdateProcessoGReq {
    ProcessoG ProcessoG = 1;
}

message UpdateProcessoGRes {}

message DeleteProcessoGReq {
    string ProcessoG_id = 1;
}

message DeleteProcessoGRes {}

// ===================


message AtualizarListaVeiculosReq {
    message Veiculo {
        string placa = 1;
        string cor = 2;
        string marca = 3;
        string modelo = 4;
        string tipo = 5;
    }
    repeated Veiculo veiculo = 1;
}

message AtualizarListaVeiculosResp {}

    // message StatusArmazenamento {
    //     message Armazenamento {
    //         string caminho = 1;
    //         int32 disponivel = 2;
    //         int32 alocado = 3;
    //         int32 utilizado = 4;
    //     }
    //     repeated Armazenamento armazenamento = 1;
    // }

    // message StatusArmazenamentoParams {}

    // message StatusArmazenamento {}