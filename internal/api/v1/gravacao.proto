syntax = "proto3";

option go_package = "./internal/api/v1";

package gravacao;

service Gravacao {
    rpc Registrar (RegistrarReq) returns (RegistrarRes) {}
    rpc RemoverRegistro (RemoverRegistroReq) returns (RemoverRegistroRes) {}

    rpc InfoProcessos (InfoProcessosReq) returns (InfoProcessosResp) {}
    rpc ConfigurarProcesso (ConfigurarProcessoReq) returns (ConfigurarProcessoResp) {}
    rpc AtualizarListaVeiculos (AtualizarListaVeiculosReq) returns (AtualizarListaVeiculosResp) {}
    // rpc statusArmazenamento (StatusArmazenamentoParams) returns (StatusArmazenamento) {}
    // rpc configurarHousekeeping (HousekeepingConfig) returns (StatusHousekeeping) {}


    rpc IniciarProcessamento (IniciarProcessamentoReq) returns (IniciarProcessamentoResp) {}
}

message RegistrarReq {
    string endereco_ip = 1;
    int32 porta = 2;
    string db_host = 3;
    string db_user = 4;
    string db_password = 5;
    string db_name = 6;
    int32 db_maxidleconns = 7;
    int32 db_maxopenconns = 8;
    string db_sslmode = 9;
}

message RegistrarRes {}

message RemoverRegistroReq{}

message RemoverRegistroRes{}





message IniciarProcessamentoReq{}

message IniciarProcessamentoResp{
    string status = 1;
}

message InfoProcessosReq {}

message InfoProcessosResp {
    message Processo {
        int32 id = 1;
        int32 camera_id = 2;
        string processador_caminho = 3;
        enum StatusProcesso {
            PARADO = 0;
            EXECUTANDO = 1;
        }
        StatusProcesso status = 4;
    }
    repeated Processo processos = 1;
}

message ConfigurarProcessoReq {
    enum Acao {
        CONFIGURAR = 0;
        INICIAR = 1;
        PARAR = 2;
        REMOVER = 3;
        INFO = 4;
    }
    Acao acao = 1;
    int32 id = 2;
    int32 camera_id = 3;
    string processador_caminho = 4;
}

// TODO colocar info do processo abaixo (consumo armazenamento, veiculos, etc)

message ConfigurarProcessoResp {
    enum Status {
        INEXSISTENTE = 0;
        EXECUTANDO = 1;
        PARADO = 2;
    }
    Status status = 1;
    string Armazenamento = 2;
    int32 contador_capturas = 3;
}

message AtualizarListaVeiculosReq {
    message Veiculo {
        string placa = 1;
        string cor = 2;
        string marca = 3;
        string modelo = 4;
        string tipo = 5;
    }
    repeated Veiculo veiculo = 1;
}

message AtualizarListaVeiculosResp {}

    // message StatusArmazenamento {
    //     message Armazenamento {
    //         string caminho = 1;
    //         int32 disponivel = 2;
    //         int32 alocado = 3;
    //         int32 utilizado = 4;
    //     }
    //     repeated Armazenamento armazenamento = 1;
    // }

    // message StatusArmazenamentoParams {}

    // message StatusArmazenamento {}