// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GravacaoConnClient is the client API for GravacaoConn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GravacaoConnClient interface {
	GetDatabaseConfig(ctx context.Context, in *GravacaoConfig, opts ...grpc.CallOption) (*DatabaseConfig, error)
}

type gravacaoConnClient struct {
	cc grpc.ClientConnInterface
}

func NewGravacaoConnClient(cc grpc.ClientConnInterface) GravacaoConnClient {
	return &gravacaoConnClient{cc}
}

func (c *gravacaoConnClient) GetDatabaseConfig(ctx context.Context, in *GravacaoConfig, opts ...grpc.CallOption) (*DatabaseConfig, error) {
	out := new(DatabaseConfig)
	err := c.cc.Invoke(ctx, "/config.GravacaoConn/GetDatabaseConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GravacaoConnServer is the server API for GravacaoConn service.
// All implementations must embed UnimplementedGravacaoConnServer
// for forward compatibility
type GravacaoConnServer interface {
	GetDatabaseConfig(context.Context, *GravacaoConfig) (*DatabaseConfig, error)
	mustEmbedUnimplementedGravacaoConnServer()
}

// UnimplementedGravacaoConnServer must be embedded to have forward compatible implementations.
type UnimplementedGravacaoConnServer struct {
}

func (UnimplementedGravacaoConnServer) GetDatabaseConfig(context.Context, *GravacaoConfig) (*DatabaseConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseConfig not implemented")
}
func (UnimplementedGravacaoConnServer) mustEmbedUnimplementedGravacaoConnServer() {}

// UnsafeGravacaoConnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GravacaoConnServer will
// result in compilation errors.
type UnsafeGravacaoConnServer interface {
	mustEmbedUnimplementedGravacaoConnServer()
}

func RegisterGravacaoConnServer(s grpc.ServiceRegistrar, srv GravacaoConnServer) {
	s.RegisterService(&GravacaoConn_ServiceDesc, srv)
}

func _GravacaoConn_GetDatabaseConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GravacaoConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoConnServer).GetDatabaseConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.GravacaoConn/GetDatabaseConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoConnServer).GetDatabaseConfig(ctx, req.(*GravacaoConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// GravacaoConn_ServiceDesc is the grpc.ServiceDesc for GravacaoConn service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GravacaoConn_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.GravacaoConn",
	HandlerType: (*GravacaoConnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDatabaseConfig",
			Handler:    _GravacaoConn_GetDatabaseConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}
