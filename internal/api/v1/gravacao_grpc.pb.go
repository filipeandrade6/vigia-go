// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GravacaoClient is the client API for Gravacao service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GravacaoClient interface {
	Registrar(ctx context.Context, in *RegistrarReq, opts ...grpc.CallOption) (*RegistrarRes, error)
	RemoverRegistro(ctx context.Context, in *RemoverRegistroReq, opts ...grpc.CallOption) (*RemoverRegistroRes, error)
	AtualizarListaVeiculos(ctx context.Context, in *AtualizarListaVeiculosReq, opts ...grpc.CallOption) (*AtualizarListaVeiculosResp, error)
	CreateProcessoG(ctx context.Context, in *CreateProcessoGReq, opts ...grpc.CallOption) (*CreateProcessoGRes, error)
	ReadProcessoG(ctx context.Context, in *ReadProcessoGReq, opts ...grpc.CallOption) (*ReadProcessoGRes, error)
	ReadProcessoGs(ctx context.Context, in *ReadProcessoGsReq, opts ...grpc.CallOption) (*ReadProcessoGsRes, error)
	UpdateProcessoG(ctx context.Context, in *UpdateProcessoGReq, opts ...grpc.CallOption) (*UpdateProcessoGRes, error)
	DeleteProcessoG(ctx context.Context, in *DeleteProcessoGReq, opts ...grpc.CallOption) (*DeleteProcessoGRes, error)
}

type gravacaoClient struct {
	cc grpc.ClientConnInterface
}

func NewGravacaoClient(cc grpc.ClientConnInterface) GravacaoClient {
	return &gravacaoClient{cc}
}

func (c *gravacaoClient) Registrar(ctx context.Context, in *RegistrarReq, opts ...grpc.CallOption) (*RegistrarRes, error) {
	out := new(RegistrarRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/Registrar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravacaoClient) RemoverRegistro(ctx context.Context, in *RemoverRegistroReq, opts ...grpc.CallOption) (*RemoverRegistroRes, error) {
	out := new(RemoverRegistroRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/RemoverRegistro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravacaoClient) AtualizarListaVeiculos(ctx context.Context, in *AtualizarListaVeiculosReq, opts ...grpc.CallOption) (*AtualizarListaVeiculosResp, error) {
	out := new(AtualizarListaVeiculosResp)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/AtualizarListaVeiculos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravacaoClient) CreateProcessoG(ctx context.Context, in *CreateProcessoGReq, opts ...grpc.CallOption) (*CreateProcessoGRes, error) {
	out := new(CreateProcessoGRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/CreateProcessoG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravacaoClient) ReadProcessoG(ctx context.Context, in *ReadProcessoGReq, opts ...grpc.CallOption) (*ReadProcessoGRes, error) {
	out := new(ReadProcessoGRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/ReadProcessoG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravacaoClient) ReadProcessoGs(ctx context.Context, in *ReadProcessoGsReq, opts ...grpc.CallOption) (*ReadProcessoGsRes, error) {
	out := new(ReadProcessoGsRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/ReadProcessoGs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravacaoClient) UpdateProcessoG(ctx context.Context, in *UpdateProcessoGReq, opts ...grpc.CallOption) (*UpdateProcessoGRes, error) {
	out := new(UpdateProcessoGRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/UpdateProcessoG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gravacaoClient) DeleteProcessoG(ctx context.Context, in *DeleteProcessoGReq, opts ...grpc.CallOption) (*DeleteProcessoGRes, error) {
	out := new(DeleteProcessoGRes)
	err := c.cc.Invoke(ctx, "/gravacao.Gravacao/DeleteProcessoG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GravacaoServer is the server API for Gravacao service.
// All implementations must embed UnimplementedGravacaoServer
// for forward compatibility
type GravacaoServer interface {
	Registrar(context.Context, *RegistrarReq) (*RegistrarRes, error)
	RemoverRegistro(context.Context, *RemoverRegistroReq) (*RemoverRegistroRes, error)
	AtualizarListaVeiculos(context.Context, *AtualizarListaVeiculosReq) (*AtualizarListaVeiculosResp, error)
	CreateProcessoG(context.Context, *CreateProcessoGReq) (*CreateProcessoGRes, error)
	ReadProcessoG(context.Context, *ReadProcessoGReq) (*ReadProcessoGRes, error)
	ReadProcessoGs(context.Context, *ReadProcessoGsReq) (*ReadProcessoGsRes, error)
	UpdateProcessoG(context.Context, *UpdateProcessoGReq) (*UpdateProcessoGRes, error)
	DeleteProcessoG(context.Context, *DeleteProcessoGReq) (*DeleteProcessoGRes, error)
	mustEmbedUnimplementedGravacaoServer()
}

// UnimplementedGravacaoServer must be embedded to have forward compatible implementations.
type UnimplementedGravacaoServer struct {
}

func (UnimplementedGravacaoServer) Registrar(context.Context, *RegistrarReq) (*RegistrarRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registrar not implemented")
}
func (UnimplementedGravacaoServer) RemoverRegistro(context.Context, *RemoverRegistroReq) (*RemoverRegistroRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoverRegistro not implemented")
}
func (UnimplementedGravacaoServer) AtualizarListaVeiculos(context.Context, *AtualizarListaVeiculosReq) (*AtualizarListaVeiculosResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtualizarListaVeiculos not implemented")
}
func (UnimplementedGravacaoServer) CreateProcessoG(context.Context, *CreateProcessoGReq) (*CreateProcessoGRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcessoG not implemented")
}
func (UnimplementedGravacaoServer) ReadProcessoG(context.Context, *ReadProcessoGReq) (*ReadProcessoGRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProcessoG not implemented")
}
func (UnimplementedGravacaoServer) ReadProcessoGs(context.Context, *ReadProcessoGsReq) (*ReadProcessoGsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProcessoGs not implemented")
}
func (UnimplementedGravacaoServer) UpdateProcessoG(context.Context, *UpdateProcessoGReq) (*UpdateProcessoGRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcessoG not implemented")
}
func (UnimplementedGravacaoServer) DeleteProcessoG(context.Context, *DeleteProcessoGReq) (*DeleteProcessoGRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProcessoG not implemented")
}
func (UnimplementedGravacaoServer) mustEmbedUnimplementedGravacaoServer() {}

// UnsafeGravacaoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GravacaoServer will
// result in compilation errors.
type UnsafeGravacaoServer interface {
	mustEmbedUnimplementedGravacaoServer()
}

func RegisterGravacaoServer(s grpc.ServiceRegistrar, srv GravacaoServer) {
	s.RegisterService(&Gravacao_ServiceDesc, srv)
}

func _Gravacao_Registrar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).Registrar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/Registrar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).Registrar(ctx, req.(*RegistrarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gravacao_RemoverRegistro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoverRegistroReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).RemoverRegistro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/RemoverRegistro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).RemoverRegistro(ctx, req.(*RemoverRegistroReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gravacao_AtualizarListaVeiculos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtualizarListaVeiculosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).AtualizarListaVeiculos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/AtualizarListaVeiculos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).AtualizarListaVeiculos(ctx, req.(*AtualizarListaVeiculosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gravacao_CreateProcessoG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProcessoGReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).CreateProcessoG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/CreateProcessoG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).CreateProcessoG(ctx, req.(*CreateProcessoGReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gravacao_ReadProcessoG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadProcessoGReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).ReadProcessoG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/ReadProcessoG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).ReadProcessoG(ctx, req.(*ReadProcessoGReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gravacao_ReadProcessoGs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadProcessoGsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).ReadProcessoGs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/ReadProcessoGs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).ReadProcessoGs(ctx, req.(*ReadProcessoGsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gravacao_UpdateProcessoG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessoGReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).UpdateProcessoG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/UpdateProcessoG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).UpdateProcessoG(ctx, req.(*UpdateProcessoGReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gravacao_DeleteProcessoG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProcessoGReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GravacaoServer).DeleteProcessoG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravacao.Gravacao/DeleteProcessoG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GravacaoServer).DeleteProcessoG(ctx, req.(*DeleteProcessoGReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Gravacao_ServiceDesc is the grpc.ServiceDesc for Gravacao service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gravacao_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gravacao.Gravacao",
	HandlerType: (*GravacaoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registrar",
			Handler:    _Gravacao_Registrar_Handler,
		},
		{
			MethodName: "RemoverRegistro",
			Handler:    _Gravacao_RemoverRegistro_Handler,
		},
		{
			MethodName: "AtualizarListaVeiculos",
			Handler:    _Gravacao_AtualizarListaVeiculos_Handler,
		},
		{
			MethodName: "CreateProcessoG",
			Handler:    _Gravacao_CreateProcessoG_Handler,
		},
		{
			MethodName: "ReadProcessoG",
			Handler:    _Gravacao_ReadProcessoG_Handler,
		},
		{
			MethodName: "ReadProcessoGs",
			Handler:    _Gravacao_ReadProcessoGs_Handler,
		},
		{
			MethodName: "UpdateProcessoG",
			Handler:    _Gravacao_UpdateProcessoG_Handler,
		},
		{
			MethodName: "DeleteProcessoG",
			Handler:    _Gravacao_DeleteProcessoG_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gravacao.proto",
}
